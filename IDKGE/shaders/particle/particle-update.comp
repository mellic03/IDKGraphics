#version 460 core
#extension GL_GOOGLE_include_directive: require
#extension GL_ARB_bindless_texture: require

#include "particle.glsl"
#include "../include/noise.glsl"
#include "../include/time.glsl"


layout(
    local_size_x = 32,
    local_size_y = 1,
    local_size_z = 1
) in;

uniform uint un_offset;


void reset_particle( IDK_ParticleDesc desc, uint idx )
{
    vec2 uv    = vec2(float(idx % EMITTER_MAX_PARTICLES) / float(EMITTER_MAX_PARTICLES)) + IDK_GetIrrational();
    vec3 noise = IDK_WhiteNoise(uv).rgb * 2.0 - 1.0;

    // vec3 origin        = desc.pos.xyz;
    // vec3 origin_rng    = desc.posRNG.xyz;

    // vec3 velocity      = desc.vel.xyz;
    // vec3 velocity_rng  = desc.velRNG.xyz;

    // float duration     = desc.dur;
    // float duration_rng = desc.durRNG;
    // float duration_off = desc.stime * float(idx % EMITTER_MAX_PARTICLES);

    // Particles[idx].t  = 0.0 + noise.r * duration_rng - duration_off;
    Particles[idx].t[0]  = 0.0 + desc.durRNG[0] * (noise.r * 0.5 + 0.5);
    Particles[idx].sc[0] = 1.0;

    Particles[idx].pos.xyz = desc.pos.xyz + desc.posRNG.xyz * (noise);
    Particles[idx].vel.xyz = desc.vel.xyz + desc.velRNG.xyz * (noise);
    Particles[idx].col = vec4(1.0); // vec4(noise.g, 0.0, 0.0, 1.0);
}


void update_particle( IDK_ParticleDesc desc, uint idx, float dt )
{
    float timer = Particles[idx].t[0];
    float alpha = clamp(timer/desc.dur[0], 0.0, 1.0);

    Particles[idx].t[0]    += dt;
    Particles[idx].pos.xyz += dt * Particles[idx].vel.xyz;
    Particles[idx].sc[0]    = mix(desc.scA[0], desc.scB[0], alpha);
    Particles[idx].col.a    = 1.0 - alpha;
}



void main()
{
    IDK_ParticleDesc desc = IDK_SSBO_ParticleDescriptors[0];

    float dt    = IDK_GetDeltaTime();
    uint  idx   = un_offset + gl_GlobalInvocationID.x;
    float timer = Particles[idx].t[0];

    vec2 uv = vec2(float(idx % EMITTER_MAX_PARTICLES) / float(EMITTER_MAX_PARTICLES));
    vec3 noise = IDK_WhiteNoise(uv).rgb * 2.0 - 1.0;

    if (timer < 0.0 || timer > desc.dur[0])
    {
        reset_particle(desc, idx);
    }

    update_particle(desc, idx, dt);

}


