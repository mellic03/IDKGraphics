#version 460 core
#extension GL_GOOGLE_include_directive: require

#include "../include/storage.glsl"
#include "./vxgi.glsl"

layout ( local_size_x = 8, local_size_y = 8, local_size_z = 8 ) in;

layout (binding=20, rgba16f) writeonly uniform image3D un_current_aniso[6];
layout (binding=26, rgba16f) readonly  uniform image3D un_previous_aniso[6];


#define KSIZE 1
#define KSTEP 2
#define KVOLUME 4.0


void main()
{
    ivec3 texel  = ivec3(gl_GlobalInvocationID.xyz);

    const ivec3 offsets[] = ivec3[]
    (
        ivec3( 0, -1, -1 ),
        ivec3( 0, +1, -1 ),
        ivec3( 0, +1, +1 ),
        ivec3( 0, -1, +1 ),
    
        ivec3(-1, -1, -1 ),
        ivec3(-1, +1, -1 ),
        ivec3(-1, +1, +1 ),
        ivec3(-1, -1, +1 )
    );


    // X-axis
    // -----------------------------------------------------------------------------------------
    for (int x = 0;  x <= 1;  x++)
    {
        vec4 result = vec4(0.0);

        vec4 samples[4] = vec4[]
        (
            imageLoad(un_previous_aniso[0+x], 2*texel + ivec3(0,  0, -1)),
            imageLoad(un_previous_aniso[0+x], 2*texel + ivec3(0,  0, +1)),
            imageLoad(un_previous_aniso[0+x], 2*texel + ivec3(0, -1,  0)),
            imageLoad(un_previous_aniso[0+x], 2*texel + ivec3(0, +1,  0))
        );


        result = 0.25 * (samples[0] + samples[1] + samples[2] + samples[3]);
        imageStore(un_current_aniso[0+x], texel, result);
    }
    // -----------------------------------------------------------------------------------------


    // Y-axis
    // -----------------------------------------------------------------------------------------
    for (int y = 0;  y <= 1;  y++)
    {
        vec4 result = vec4(0.0);

        vec4 samples[4] = vec4[]
        (
            imageLoad(un_previous_aniso[2+y], 2*texel + ivec3( 0,  0, -1)),
            imageLoad(un_previous_aniso[2+y], 2*texel + ivec3( 0,  0, +1)),
            imageLoad(un_previous_aniso[2+y], 2*texel + ivec3(-1,  0,  0)),
            imageLoad(un_previous_aniso[2+y], 2*texel + ivec3(+1,  0,  0))
        );


        result = 0.25 * (samples[0] + samples[1] + samples[2] + samples[3]);
        imageStore(un_current_aniso[2+y], texel, result);
    }
    // -----------------------------------------------------------------------------------------


    // Z-axis
    // -----------------------------------------------------------------------------------------
    for (int z = 0;  z <= 1;  z++)
    {
        vec4 result = vec4(0.0);

        vec4 samples[4] = vec4[]
        (
            imageLoad(un_previous_aniso[4+z], 2*texel + ivec3(-1,  0,  0)),
            imageLoad(un_previous_aniso[4+z], 2*texel + ivec3(+1,  0,  0)),
            imageLoad(un_previous_aniso[4+z], 2*texel + ivec3( 0, -1,  0)),
            imageLoad(un_previous_aniso[4+z], 2*texel + ivec3( 0, +1,  0))
        );


        result = 0.25 * (samples[0] + samples[1] + samples[2] + samples[3]);
        imageStore(un_current_aniso[4+z], texel, result);
    }
    // -----------------------------------------------------------------------------------------

}

