#version 460 core
#extension GL_GOOGLE_include_directive: require
#extension GL_ARB_bindless_texture: require

#include "./terrain.glsl"


layout(
    local_size_x = 8,
    local_size_y = 8,
    local_size_z = 1
) in;


uniform sampler2D un_input;
layout (binding=0, r32f) writeonly uniform image2D un_output;

uniform int axis;

 



void main()
{
    ivec2 texel    = ivec2(gl_GlobalInvocationID.xy);
    vec2  tsize    = textureSize(un_input, 0);
    vec2  texcoord = vec2(texel) / tsize;

    float result = textureLod(un_input, texcoord, 0.0).r;

    const vec2 offsets[9] = vec2[9]
    (
        vec2(-1.0, -1.0),
        vec2( 0.0, -1.0),
        vec2( 1.0, -1.0),
        vec2(-1.0,  0.0),
        vec2( 0.0,  0.0),
        vec2( 1.0,  0.0),
        vec2(-1.0,  1.0),
        vec2( 0.0,  1.0),
        vec2( 1.0,  1.0)
    );


    


    #define KERNEL_HW 3

    for (int row=-KERNEL_HW; row<=KERNEL_HW; row++)
    {
        for (int col=-KERNEL_HW; col<=KERNEL_HW; col++)
        {
            vec2 uv = texcoord + (vec2(col, row) / tsize);
            result += textureLod(un_input, uv, 0.0).r;
        }
    }

    result /= (2*KERNEL_HW + 1) * (2*KERNEL_HW + 1);

    imageStore(un_output, texel, vec4(result, 0.0, 0.0, 1.0));
}

