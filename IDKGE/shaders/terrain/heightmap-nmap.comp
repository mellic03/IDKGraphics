#version 460 core
#extension GL_GOOGLE_include_directive: require
#extension GL_ARB_bindless_texture: require

#include "../include/storage.glsl"
#include "./terrain.glsl"


layout(
    local_size_x = 8,
    local_size_y = 8,
    local_size_z = 1
) in;


layout (binding=0, rgba16f) readonly  uniform image2D un_input;
layout (binding=1, rgba16f) writeonly uniform image2D un_output;



float sobel_x( ivec2 texel )
{
    const ivec2 offsets[9] = ivec2[9](
        ivec2(-1, -1),
        ivec2( 0, -1),
        ivec2( 1, -1),
        ivec2(-1,  0),
        ivec2( 0,  0),
        ivec2( 1,  0),
        ivec2(-1,  1),
        ivec2( 0,  1),
        ivec2( 1,  1)
    );

    const float weights[9] = float[9](
        -1.0, 0.0, +1.0,
        -2.0, 0.0, +2.0,
        -1.0, 0.0, +1.0
    );

    float result = 0.0;

    for (int i=0; i<9; i++)
    {
        float height = imageLoad(un_input, texel+offsets[i]).r;
        result += weights[i] * height;
    }

    return result;
}


float sobel_y( ivec2 texel )
{
    const ivec2 offsets[9] = ivec2[9](
        ivec2(-1, -1),
        ivec2( 0, -1),
        ivec2( 1, -1),
        ivec2(-1,  0),
        ivec2( 0,  0),
        ivec2( 1,  0),
        ivec2(-1,  1),
        ivec2( 0,  1),
        ivec2( 1,  1)
    );

    const float weights[9] = float[9]
    (
       -1.0, -2.0, -1.0,
        0.0,  0.0,  0.0,
       +1.0, +2.0, +1.0
    );


    float result = 0.0;

    for (int i=0; i<9; i++)
    {
        float height = imageLoad(un_input, texel+offsets[i]).r;
        result += weights[i] * height;
    }

    return result;
}



vec3 computeNormal( ivec2 texel )
{
    float xscale = (mat3(IDK_SSBO_Terrain.transform) * vec3(0.5)).x;
    float yscale = IDK_SSBO_Terrain.scale.y;

    float left  = imageLoad(un_input, texel + ivec2(-1, 0)).r;
    float right = imageLoad(un_input, texel + ivec2(+1, 0)).r;
    float up    = imageLoad(un_input, texel + ivec2(0, -1)).r;
    float down  = imageLoad(un_input, texel + ivec2(0, +1)).r;

    float tsize = (2.0*xscale) / 1024.0;

    vec3 L = vec3(-tsize, left,  0.0);
    vec3 R = vec3(+tsize, right, 0.0);
    vec3 U = vec3(0.0,  up,    -tsize);
    vec3 D = vec3(0.0,  down,  +tsize);

    return normalize(cross(R-L, U-D));
}



void main()
{
    ivec2 texel  = ivec2(gl_GlobalInvocationID.xy);
    float xscale = length(vec3(IDK_SSBO_Terrain.transform[0]));
    float width  = IDK_SSBO_Terrain.scale.x;
    float yscale = IDK_SSBO_Terrain.scale.y;

    float ratio0 = (yscale / width) * (width / xscale);
    float ratio  = xscale / yscale;

    float dX = (256/xscale) * (ratio*ratio0) * yscale * sobel_x(texel);
    float dZ = (256/xscale) * (ratio*ratio0) * yscale * sobel_y(texel);

    vec3 T = vec3(1.0, dX, 0.0);
    vec3 B = vec3(0.0, dZ, 1.0);
    vec3 N = normalize(cross(T, B));
         N = vec3(-N.x, -N.y, -N.z);

    imageStore(un_output, texel, vec4(N, 1.0));
}

