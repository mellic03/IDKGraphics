#version 460 core
#extension GL_GOOGLE_include_directive: require
#include "../include/storage.glsl"


layout(
    local_size_x = 8,
    local_size_y = 8,
    local_size_z = 1
) in;


uniform sampler2D un_input;
layout (binding=1, rgba16f) writeonly uniform image2D un_output;

uniform int un_direction = -1;
uniform int un_scale = 1;
uniform int un_miplevel = 1;


// vec4 gaussian5x5( ivec2 texel )
vec4 gaussian5x5( vec2 texcoord, vec2 tsize, float level )
{
    float[25] weights = float[25](
        1,  4,  7,  4, 1,
        4, 16, 26, 16, 4,
        7, 26, 41, 26, 7,
        4, 16, 26, 16, 4,
        1,  4,  7,  4, 1
    );

    vec4 result = vec4(0.0);

    for (int i=-2; i<=+2; i++)
    {
        for (int j=-2; j<=+2; j++)
        {
            int idx = 5*(j+2) + (i+2);

            vec2 uv = texcoord + tsize*vec2(j, i);
            result += (weights[idx] / 273.0) * textureLod(un_input, uv, level);
        }
    }

    return result;
}


// vec4 gaussian7x7( ivec2 texel )
// {
//     float[49] weights = float[49](
//         0,  0,  1,   2,  1,  0, 0,
//         0,  3, 13,  22, 13,  3, 0,
//         1, 13, 56,  97, 59, 13, 1,
//         2, 22, 97, 159, 97, 22, 2,
//         1, 13, 56,  97, 59, 13, 1,
//         0,  3, 13,  22, 13,  3, 0,
//         0,  0, 1,    2,  1,  0, 0
//     );

//     vec4 result = vec4(0.0);

//     for (int i=-3; i<=+3; i++)
//     {
//         for (int j=-3; j<=+3; j++)
//         {
//             int idx = 7*(j+3) + (i+3);

//             result += (weights[idx] / 1003.0) * imageLoad(un_input, texel + ivec2(j, i));
//         }
//     }

//     return result;
// }


// vec4 gaussianRxR( ivec2 texel )
// {
//     const int HW = 5;
//     vec4 result = vec4(0.0);

//     for (int i=-HW; i<=+HW; i++)
//     {
//         for (int j=-HW; j<=+HW; j++)
//         {
//             result += imageLoad(un_input, texel + ivec2(j, i));
//         }
//     }

//     return result / ((2*HW+1)*(2*HW+1));
// }




vec3 upscale( vec2 texcoord )
{
    vec2 tsize = 1.0 / textureSize(un_input, 0);
    vec2 uv    = texcoord;

    float x = tsize.x;
    float y = tsize.y;

    vec3 a = textureLod(un_input, vec2(uv.x - x, uv.y + y), 0).rgb;
    vec3 b = textureLod(un_input, vec2(uv.x,     uv.y + y), 0).rgb;
    vec3 c = textureLod(un_input, vec2(uv.x + x, uv.y + y), 0).rgb;

    vec3 d = textureLod(un_input, vec2(uv.x - x, uv.y), 0).rgb;
    vec3 e = textureLod(un_input, vec2(uv.x,     uv.y), 0).rgb;
    vec3 f = textureLod(un_input, vec2(uv.x + x, uv.y), 0).rgb;

    vec3 g = textureLod(un_input, vec2(uv.x - x, uv.y - y), 0).rgb;
    vec3 h = textureLod(un_input, vec2(uv.x,     uv.y - y), 0).rgb;
    vec3 i = textureLod(un_input, vec2(uv.x + x, uv.y - y), 0).rgb;

    vec3 result  = 4.0 * e;
         result += 2.0 * (b + d + f + h);
         result += 1.0 * (a + c + g + i);
         result *= (1.0 / 16.0);

    return result;

}


vec3 downscale( ivec2 texel, int sc )
{
    vec2 tsize = textureSize(un_input, 0);
    vec2 uv    = vec2(sc*texel) / (tsize);

    float x = (4.0 * float(un_miplevel)) / tsize.x;
    float y = (4.0 * float(un_miplevel)) / tsize.y;

    if (un_miplevel >= 3)
    {
        x *= (un_miplevel - 1);
        y *= (un_miplevel - 1);
    }

    vec3 a = texture(un_input, vec2(uv.x - x, uv.y + y)).rgb;
    vec3 b = texture(un_input, vec2(uv.x,     uv.y + y)).rgb;
    vec3 c = texture(un_input, vec2(uv.x + x, uv.y + y)).rgb;

    vec3 d = texture(un_input, vec2(uv.x - x, uv.y)).rgb;
    vec3 e = texture(un_input, vec2(uv.x,     uv.y)).rgb;
    vec3 f = texture(un_input, vec2(uv.x + x, uv.y)).rgb;

    vec3 g = texture(un_input, vec2(uv.x - x, uv.y - y)).rgb;
    vec3 h = texture(un_input, vec2(uv.x,     uv.y - y)).rgb;
    vec3 i = texture(un_input, vec2(uv.x + x, uv.y - y)).rgb;

    vec3 j = texture(un_input, vec2(uv.x - x, uv.y + y)).rgb;
    vec3 k = texture(un_input, vec2(uv.x + x, uv.y + y)).rgb;
    vec3 l = texture(un_input, vec2(uv.x - x, uv.y - y)).rgb;
    vec3 m = texture(un_input, vec2(uv.x + x, uv.y - y)).rgb;

    // texel *= sc;

    // float x = 16;
    // float y = 16;

    // // tx - x = -7
    // // tx = -7 + x
    // // tx + 7 = x

    // if (texel.x - x < 0) x = 8;
    // if (texel.x + x >= tsize.x) x = 4;

    // if (texel.y - y < 0) y = 8;
    // if (texel.y + y >= tsize.y) y = 4;

    // vec3 a = texelFetch(un_input, ivec2(texel.x - x, texel.y + y), 0).rgb;
    // vec3 b = texelFetch(un_input, ivec2(texel.x,       texel.y + y), 0).rgb;
    // vec3 c = texelFetch(un_input, ivec2(texel.x + x, texel.y + y), 0).rgb;

    // vec3 d = texelFetch(un_input, ivec2(texel.x - x, texel.y), 0).rgb;
    // vec3 e = texelFetch(un_input, ivec2(texel.x,       texel.y), 0).rgb;
    // vec3 f = texelFetch(un_input, ivec2(texel.x + x, texel.y), 0).rgb;

    // vec3 g = texelFetch(un_input, ivec2(texel.x - x, texel.y - y), 0).rgb;
    // vec3 h = texelFetch(un_input, ivec2(texel.x,       texel.y - y), 0).rgb;
    // vec3 i = texelFetch(un_input, ivec2(texel.x + x, texel.y - y), 0).rgb;

    // vec3 j = texelFetch(un_input, ivec2(texel.x - x, texel.y + y), 0).rgb;
    // vec3 k = texelFetch(un_input, ivec2(texel.x + x, texel.y + y), 0).rgb;
    // vec3 l = texelFetch(un_input, ivec2(texel.x - x, texel.y - y), 0).rgb;
    // vec3 m = texelFetch(un_input, ivec2(texel.x + x, texel.y - y), 0).rgb;

    vec3 result  = 0.125 * e;
         result += 0.03125 * (a + c + g + i);
         result += 0.06250 * (b + d + f + h);
         result += 0.12500 * (j + k + l + m);

    return clamp(result, 0.0, 1.0);
}


vec3 downscale2( vec2 uv )
{
    vec2 tsize = 4.0 / textureSize(un_input, un_miplevel);

    float x = tsize.x;
    float y = tsize.y;

    vec3 result = vec3(0.0);

    result += textureLod(un_input, vec2(uv.x - x, uv.y + y), 0).rgb;
    result += textureLod(un_input, vec2(uv.x,       uv.y + y), 0).rgb;
    result += textureLod(un_input, vec2(uv.x + x, uv.y + y), 0).rgb;

    result += textureLod(un_input, vec2(uv.x - x, uv.y), 0).rgb;
    result += textureLod(un_input, vec2(uv.x,       uv.y), 0).rgb;
    result += textureLod(un_input, vec2(uv.x + x, uv.y), 0).rgb;

    result += textureLod(un_input, vec2(uv.x - x, uv.y - y), 0).rgb;
    result += textureLod(un_input, vec2(uv.x,       uv.y - y), 0).rgb;
    result += textureLod(un_input, vec2(uv.x + x, uv.y - y), 0).rgb;

    result += textureLod(un_input, vec2(uv.x - x, uv.y + y), 0).rgb;
    result += textureLod(un_input, vec2(uv.x + x, uv.y + y), 0).rgb;
    result += textureLod(un_input, vec2(uv.x - x, uv.y - y), 0).rgb;
    result += textureLod(un_input, vec2(uv.x + x, uv.y - y), 0).rgb;

    return result / 13.0;
}


void main()
{
    IDK_Camera cam = IDK_UBO_cameras[0];

    ivec2 texel  = ivec2(gl_GlobalInvocationID.xy);
    vec3  result = downscale(texel, un_scale);

    imageStore(un_output, texel, vec4(result, 1.0));
}

