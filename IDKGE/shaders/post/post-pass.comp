#version 460 core
#extension GL_GOOGLE_include_directive: require

#include "../include/storage.glsl"
#include "../include/util.glsl"

layout(
    local_size_x = 8,
    local_size_y = 8,
    local_size_z = 1
) in;


layout (binding=0, rgba16f) writeonly uniform image2D un_output;



uniform sampler2D un_gPosition;
uniform sampler2D un_gNormal;
uniform sampler2D un_gDepth;
uniform sampler2D un_noise;

#define SSAO_SAMPLES 32
#define DEPTH_CUTOFF 0.001



float linearDepth( float d )
{
    const float zNear = 0.001;
    const float zFar = 32.0;
    return zNear * zFar / (zFar + d * (zNear - zFar));
}


float SSAO_sample( vec2 texcoord, vec3 fragpos, float frag_depth, vec3 N, mat4 V )
{
    vec3 noise = texture(un_noise, 6.0*texcoord).rgb;
    vec3 sample_dir = normalize(noise);

    if (dot(sample_dir, N) < 0.0)
    {
        sample_dir *= -1.0;
    }

    vec3  sample_worldspace = fragpos + sample_dir;
    vec3  sample_viewspace  = (V * vec4(sample_worldspace, 1.0)).xyz;
    float sample_depth      = abs(sample_viewspace.z);

    return (frag_depth >= sample_depth + 0.001 ? 1.0 : 0.0);
}


float SSAO()
{
    IDK_Camera camera = IDK_RenderData_GetCamera();
    vec3 viewpos = camera.position.xyz;

    ivec2 texel    = ivec2(gl_GlobalInvocationID.xy);
    vec2  texcoord = vec2(texel) / vec2(camera.width, camera.height);

    float depth = texture(un_gDepth, texcoord).r;
    float frag_depth = linearDepth(depth);

    vec3 fragpos = IDK_WorldFromDepth(un_gDepth, texcoord, camera.P, camera.V);
    vec3 normal  = texture(un_gNormal, texcoord).rgb;

    float result = 0.0;

    for (int y=-6; y<=6; y++)
    {
        for (int x=-6; x<=6; x++)
        {
            vec2 offset = vec2(x, y) / vec2(camera.width, camera.height);
            vec2 sample_uv = texcoord + offset;

            result += SSAO_sample(sample_uv, fragpos, depth, normal, camera.V);
        }
    }

    return result / SSAO_SAMPLES;
}



void main()
{
    IDK_Camera camera = IDK_RenderData_GetCamera();
    vec3 viewpos = camera.position.xyz;

    ivec2 texel    = ivec2(gl_GlobalInvocationID.xy);
    vec2  texcoord = vec2(texel) / vec2(camera.width, camera.height);

    float depth = texture(un_gDepth, texcoord).r;
    float frag_depth = linearDepth(depth);

    vec3 fragpos = IDK_WorldFromDepth(un_gDepth, texcoord, camera.P, camera.V);
    vec3 normal  = texture(un_gNormal, texcoord).rgb;

    vec3 result = vec3(0.0);


    result *= SSAO();

    imageStore(un_output, texel, vec4(result, 1.0));

}

